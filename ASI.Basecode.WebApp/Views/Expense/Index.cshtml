@model ASI.Basecode.Data.Models.Expense
@inject ASI.Basecode.Services.Interfaces.ICategoryService CategoryService
@inject ASI.Basecode.Services.Interfaces.IExpenseService ExpenseService

@{
    ViewData["Title"] = "Expense Management";
    var userId = User.Claims.FirstOrDefault(c => c.Type == "UserId")?.Value;
    var categories = CategoryService.GetCategoriesByUserId(int.Parse(userId)).ToList();

    var expenses =  ExpenseService.GetUserExpenses(int.Parse(userId));

}
@section modals {
    <div id="modal" class="fixed inset-0 bg-black/40 backdrop-blur-sm z-50 flex items-center justify-center @(ViewData.ModelState.IsValid ? "hidden" : "flex")">
        <form asp-action="AddExpenses" method="post" class="bg-white dark:bg-gray-800 rounded-2xl p-8 md:p-12 w-11/12 max-w-2xl shadow-2xl">
            <div class="space-y-6">
                <div class="text-center space-y-3">
                    <h1 class="text-3xl text-gray-800 dark:text-white font-bold">Add a New Expense</h1>
                    <p class="text-gray-600 dark:text-gray-300 text-lg">Track your spending by adding a new expense entry below</p>
                    <div class="w-20 h-1 bg-blue-500 mx-auto rounded-full"></div>
                </div>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div class="flex flex-col space-y-2 col-span-2">
                        <label for="ExpenseTitle" class="text-gray-700 dark:text-gray-300 font-medium">Expense Title</label>
                        <input class="outline-none bg-gray-50 dark:bg-gray-700 p-3 rounded-xl border border-gray-200 dark:border-gray-600 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all duration-200"
                               type="text" id="ExpenseTitle" name="ExpenseTitle" maxlength="100" placeholder="e.g. Grocery Shopping" />
                        <span asp-validation-for="ExpenseTitle" class="text-red-500 text-sm"></span>
                    </div>

                    <div class="flex flex-col space-y-2 col-span-2">
                        <label for="CategoryId" class="text-gray-700 dark:text-gray-300 font-medium">Category</label>
                        <select class="outline-none bg-gray-50 dark:bg-gray-700 p-3 rounded-xl border border-gray-200 dark:border-gray-600 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all duration-200"
                                id="CategoryId" asp-for="CategoryId" name="CategoryId" >
                            <option value="">Select a category</option>
                            @foreach (var category in categories)
                            {
                                <option value="@category.Id">@category.Name</option>
                            }
                        </select>
                        <span asp-validation-for="CategoryId" class="text-red-500 text-sm"></span>
                    </div>

                    <div class="flex flex-col space-y-2 col-span-2">
                        <label for="Amount" class="text-gray-700 dark:text-gray-300 font-medium">Amount</label>
                        <div class="relative">
                            <span class="absolute left-3 top-1/2 -translate-y-1/2 text-gray-500 dark:text-gray-400">₱</span>
                            <input type="number"
                                   class="pl-8 w-full outline-none bg-gray-50 dark:bg-gray-700 p-3 rounded-xl border border-gray-200 dark:border-gray-600 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all duration-200"
                                   id="Amount" name="Amount" step="0.01" min="0" placeholder="0.00" />
                        </div>
                        <span asp-validation-for="Amount" class="text-red-500 text-sm"></span>
                    </div>
                </div>
                <div class="flex justify-end gap-3 pt-6 border-t border-gray-100 dark:border-gray-600">
                    <a id="close" class="px-6 py-3 text-gray-700 dark:text-gray-300 bg-gray-100 dark:bg-gray-700 rounded-xl cursor-pointer hover:bg-gray-200 dark:hover:bg-gray-600 transition-all duration-200">
                        Cancel
                    </a>
                    <button type="submit" class="px-6 py-3 bg-blue-500 text-white rounded-xl hover:bg-blue-600 transition-all duration-200">
                        Save Expense
                    </button>
                </div>
            </div>
        </form>
    </div>

    <!-- Delete Confirmation Modal -->
    <div id="deleteModal" class="fixed inset-0 bg-black/40 backdrop-blur-sm z-50 hidden items-center justify-center">
        <div class="bg-white dark:bg-gray-800 rounded-2xl p-8 w-11/12 max-w-md shadow-2xl">
            <div class="space-y-6">
                <div class="text-center space-y-3">
                    <h2 class="text-2xl text-gray-800 dark:text-white font-bold">Confirm Deletion</h2>
                    <p class="text-gray-600 dark:text-gray-300">Are you sure you want to delete this expense? This action cannot be undone.</p>
                </div>
                <div class="flex justify-end gap-3 pt-6 border-t border-gray-100 dark:border-gray-600">
                    <button id="cancelDelete" class="px-6 py-3 text-gray-700 dark:text-gray-300 bg-gray-100 dark:bg-gray-700 rounded-xl hover:bg-gray-200 dark:hover:bg-gray-600 transition-all duration-200">
                        Cancel
                    </button>
                    <button id="confirmDelete" class="px-6 py-3 bg-red-500 text-white rounded-xl hover:bg-red-600 transition-all duration-200">
                        Delete
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<div class="container">
    <!-- Breadcrumbs -->
    <nav aria-label="breadcrumb" class="mb-8">
        <ol class="flex items-center space-x-2">
            <li class="flex items-center">
                <a href="@Url.Action("Index", "Home")" class="text-gray-500 dark:text-gray-400 hover:text-blue-500 transition-colors duration-200">
                    <i class="fas fa-home text-sm"></i>
                    <span class="ml-1">Home</span>
                </a>
            </li>
            <li class="flex items-center">
                <i class="fas fa-chevron-right text-gray-400 text-sm mx-2"></i>
                <span class="text-gray-400">
                    <i class="fas fa-wallet text-sm"></i>
                    <span class="ml-1">Expenses</span>
                </span>
            </li>
        </ol>
    </nav>

    <!-- Header -->
    <div class="mb-8">
        <h1 class="text-3xl font-bold text-gray-800 dark:text-white mb-2">@ViewData["Title"]</h1>
        <p class="text-gray-600 dark:text-gray-300">Track and manage your expenses efficiently</p>
    </div>

    <!-- Stats Cards -->
    <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
        <div class="bg-white dark:bg-gray-800 rounded-2xl p-6 shadow-sm border border-gray-100 dark:border-gray-700">
            <div class="flex items-center justify-between mb-4">
                <h3 class="text-gray-600 dark:text-gray-300 text-sm font-medium">Total Expenses</h3>
                <span class="text-blue-500 bg-blue-50 dark:bg-blue-900/50 p-2 rounded-lg">
                    <svg width="20" height="20" fill="currentColor" viewBox="0 0 24 24"><path d="M12 2L2 7l10 5 10-5-10-5zM2 17l10 5 10-5M2 12l10 5 10-5"></path></svg>
                </span>
            </div>
            <p class="text-2xl font-bold text-gray-800 dark:text-white">@expenses.Sum(e => e.Amount).ToString("C", new System.Globalization.CultureInfo("en-PH"))</p>
        </div>
    </div>

    <!-- Filters Section -->
    <div class="bg-white dark:bg-gray-800 rounded-2xl p-6 mb-8 shadow-sm border border-gray-100 dark:border-gray-700">
        <div class="flex flex-wrap items-center gap-4">
            <div class="flex-1 min-w-[200px]">
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Search</label>
                <input type="text" id="searchInput" class="w-full bg-gray-50 dark:bg-gray-700 border border-gray-200 dark:border-gray-600 rounded-xl px-4 py-2.5 dark:text-white" placeholder="Search expenses...">
            </div>
            <div class="flex-1 min-w-[200px]">
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Category</label>
                <select id="categoryFilter" class="w-full bg-gray-50 dark:bg-gray-700 border border-gray-200 dark:border-gray-600 rounded-xl px-4 py-2.5 dark:text-white">
                    <option value="">All Categories</option>
                    @foreach (var category in categories)
                    {
                        <option value="@category.Id">@category.Name</option>
                    }
                </select>
            </div>
            <div class="flex-1 min-w-[200px]">
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Select Date</label>
                <input type="date" id="dateFilter" class="w-full bg-gray-50 dark:bg-gray-700 border border-gray-200 dark:border-gray-600 rounded-xl px-4 py-2.5 dark:text-white" />
            </div>
        </div>
    </div>

    <!-- Expenses Table -->
    <div class="bg-white dark:bg-gray-800 rounded-2xl shadow-sm border border-gray-100 dark:border-gray-700 overflow-hidden">
        <div class="flex justify-between items-center p-6 border-b border-gray-100 dark:border-gray-700">
            <h2 class="text-lg font-semibold text-gray-800 dark:text-white">Expense List</h2>
            <button id="buttonAdd" class="bg-blue-500 px-4 py-2 rounded-xl text-white hover:bg-blue-600 transition-all duration-200 flex items-center gap-2">
                <i class="fas fa-plus"></i> Add Expense
            </button>
        </div>

        <div class="overflow-x-auto">
            <table class="w-full">
                <thead>
                    <tr class="bg-gray-50 dark:bg-gray-700/50 border-b border-gray-100 dark:border-gray-700">
                        <th class="text-left text-sm font-semibold text-gray-600 dark:text-gray-300 p-4">Title</th>
                        <th class="text-left text-sm font-semibold text-gray-600 dark:text-gray-300 p-4">Category</th>
                        <th class="text-right text-sm font-semibold text-gray-600 dark:text-gray-300 p-4">Amount</th>
                        <th class="text-left text-sm font-semibold text-gray-600 dark:text-gray-300 p-4">Date</th>
                        <th class="text-center text-sm font-semibold text-gray-600 dark:text-gray-300 p-4">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @if (expenses.Count > 0)
                    {
                        foreach (var expense in expenses)
                        {
                            <tr class="border-b border-gray-50 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-700/50 transition-colors duration-200">
                                <td class="p-4 text-gray-800 dark:text-white">@expense.ExpenseTitle</td>
                                <td class="p-4">
                                    <span class="px-3 py-1 rounded-full text-sm bg-blue-50 dark:bg-blue-900/50 text-blue-600 dark:text-blue-300">
                                        @expense.Category?.Name
                                    </span>
                                </td> 
                                <td class="p-4 text-right font-medium">@expense.Amount.ToString("C", new System.Globalization.CultureInfo("en-PH"))</td>
                                <td class="p-4 text-gray-600 dark:text-gray-300">@expense.DateCreated.ToShortDateString()</td>
                                <td class="p-4">
                                    <div class="flex justify-center gap-3">
                                        <a href="@Url.Action("UpdateExpenses", "Expense", new { id = expense.Id })"
                                           class="px-4 py-2 text-blue-600 bg-blue-50 dark:bg-blue-900/50 rounded-xl hover:bg-blue-100 dark:hover:bg-blue-800 transition-all duration-200 flex items-center gap-2">
                                            <i class="fas fa-edit"></i> 
                                        </a>
                                        <button onclick="showDeleteConfirmation(@expense.Id)" 
                                                class="px-4 py-2 text-red-600 bg-red-50 dark:bg-red-900/50 rounded-xl hover:bg-red-100 dark:hover:bg-red-800 transition-all duration-200 flex items-center gap-2">
                                            <i class="fas fa-trash"></i> 
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="5" class="p-8 text-center text-gray-500 dark:text-gray-400">No expenses found.</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

    <!-- Add pagination controls after the table -->
    <div class="flex justify-between items-center p-4 border-t border-gray-100 dark:border-gray-700">
        <div class="text-gray-600 dark:text-gray-300">
            <span id="showing-entries">Showing 1-10 of 100 entries</span>
        </div>
        <div class="flex gap-2">
            <button id="prevPage" class="px-4 py-2 text-gray-600 dark:text-gray-300 bg-gray-100 dark:bg-gray-700 rounded-xl hover:bg-gray-200 dark:hover:bg-gray-600 transition-all duration-200 disabled:opacity-50">
                Previous
            </button>
            <div id="pageNumbers" class="flex gap-1">
                <!-- Page numbers will be inserted here -->
            </div>
            <button id="nextPage" class="px-4 py-2 text-gray-600 dark:text-gray-300 bg-gray-100 dark:bg-gray-700 rounded-xl hover:bg-gray-200 dark:hover:bg-gray-600 transition-all duration-200 disabled:opacity-50">
                Next
            </button>
        </div>
    </div>
</div>

@section scripts {
    <script>
        var errorMessage = '@TempData["ErrorMessage"]';
        var Success = '@TempData["Success"]';
        if (errorMessage) {
            toastr.error(errorMessage);
        }
        if (Success) {
            toastr.success(Success);
        }
        const expenses = @Html.Raw(Json.Serialize(expenses.Select(e => new
        {
            id = EncryptionUtility.Encrypt(e.Id.ToString()),
            title = e.ExpenseTitle,
            amount = e.Amount,
            date = e.DateCreated,
            categoryId = e.CategoryId,
            categoryName = e.Category?.Name
        })));

        // Pagination settings
        const itemsPerPage = 10;
        let currentPage = 1;
        let filteredExpenses = [...expenses];

        // Filter and search functionality
        function filterExpenses() {
            const searchTerm = document.getElementById('searchInput').value.toLowerCase();
            const categoryId = document.getElementById('categoryFilter').value;
            const dateFilter = document.getElementById('dateFilter').value;

            filteredExpenses = expenses.filter(expense => {
                const matchesSearch = expense.title.toLowerCase().includes(searchTerm);
                const matchesCategory = !categoryId || expense.categoryId == categoryId;
                const matchesDate = !dateFilter || new Date(expense.date).toLocaleDateString() === new Date(dateFilter).toLocaleDateString();
                return matchesSearch && matchesCategory && matchesDate;
            });

            currentPage = 1;
            renderTable();
            updatePagination();
        }

        // Render table with current page data
        function renderTable() {
            const tbody = document.querySelector('tbody');
            const start = (currentPage - 1) * itemsPerPage;
            const end = start + itemsPerPage;
            const pageExpenses = filteredExpenses.slice(start, end);

            tbody.innerHTML = pageExpenses.length ? pageExpenses.map(expense => `
                <tr class="border-b border-gray-50 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-700/50 transition-colors duration-200">
                    <td class="p-4 text-gray-800 dark:text-white">${expense.title}</td>
                    <td class="p-4">
                        <span class="px-3 py-1 rounded-full text-sm bg-blue-50 dark:bg-blue-900/50 text-blue-600 dark:text-blue-300">
                            ${expense.categoryName}
                        </span>
                    </td>
                    <td class="p-4 text-right font-medium">₱${expense.amount.toFixed(2)}</td>
                    <td class="p-4 text-gray-600 dark:text-gray-300">${new Date(expense.date).toLocaleDateString()}</td>
                    <td class="p-4">
                        <div class="flex justify-center gap-3">
                            <a href="/Expense/UpdateExpenses?id=${expense.id}" 
                               class="px-4 py-2 text-blue-600 bg-blue-50 dark:bg-blue-900/50 rounded-xl hover:bg-blue-100 dark:hover:bg-blue-800 transition-all duration-200">
                                <i class="fas fa-edit"></i>
                            </a>
                            <button onclick="showDeleteConfirmation('${expense.id}')"
                                     class="px-4 py-2 text-red-600 bg-red-50 dark:bg-red-900/50 rounded-xl hover:bg-red-100 dark:hover:bg-red-800 transition-all duration-200">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </td>
                </tr>
            `).join('') : '<tr><td colspan="5" class="p-8 text-center text-gray-500 dark:text-gray-400">No expenses found.</td></tr>';
        }

        // Update pagination controls
        function updatePagination() {
            const totalPages = Math.ceil(filteredExpenses.length / itemsPerPage);
            const pageNumbers = document.getElementById('pageNumbers');
            const showing = document.getElementById('showing-entries');
            const start = (currentPage - 1) * itemsPerPage + 1;
            const end = Math.min(currentPage * itemsPerPage, filteredExpenses.length);

            showing.textContent = `Showing ${start}-${end} of ${filteredExpenses.length} entries`;
            document.getElementById('prevPage').disabled = currentPage === 1;
            document.getElementById('nextPage').disabled = currentPage === totalPages;

            // Generate page numbers
            let pages = '';
            for (let i = 1; i <= totalPages; i++) {
                pages += `<button class="px-3 py-1 rounded-lg ${currentPage === i ? 'bg-blue-500 text-white' : 'bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-300'}"
                                 onclick="goToPage(${i})">${i}</button>`;
            }
            pageNumbers.innerHTML = pages;
        }

        function goToPage(page) {
            currentPage = page;
            renderTable();
            updatePagination();
        }

        // Event listeners
        document.getElementById('searchInput').addEventListener('input', filterExpenses);
        document.getElementById('categoryFilter').addEventListener('change', filterExpenses);
        document.getElementById('dateFilter').addEventListener('change', filterExpenses);
        document.getElementById('prevPage').addEventListener('click', () => goToPage(currentPage - 1));
        document.getElementById('nextPage').addEventListener('click', () => goToPage(currentPage + 1));

        // Initial render
        renderTable();
        updatePagination();

        // Existing modal code
        const modal = document.getElementById('modal');
        const add = document.getElementById('buttonAdd');
        const close = document.getElementById('close');

        add.addEventListener('click', () => {
            modal.style.display = 'flex';
        });
        close.addEventListener('click', () => {
            modal.style.display = 'none';
        });

        // Delete confirmation modal functionality
        const deleteModal = document.getElementById('deleteModal');
        let expenseIdToDelete = null;

        function showDeleteConfirmation(id) {
            
            expenseIdToDelete = id;
            deleteModal.classList.remove('hidden');
            deleteModal.classList.add('flex');
        }

        document.getElementById('cancelDelete').addEventListener('click', () => {
            deleteModal.classList.remove('flex');
            deleteModal.classList.add('hidden');
            expenseIdToDelete = null;
        });

        document.getElementById('confirmDelete').addEventListener('click', () => {
            if (expenseIdToDelete) {
                window.location.href = `/Expense/DeleteConfirmed?id=${expenseIdToDelete}`;
            }
        });
    </script>
}